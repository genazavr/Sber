import 'package:flutter/material.dart';
import 'package:firebase_database/firebase_database.dart';
import 'package:provider/provider.dart';
import '../providers/user_provider.dart';
import '../widgets/leaf_background.dart';

/// =====================
/// üåø –≠–ö–†–ê–ù –í–ò–ö–¢–û–†–ò–ù–´
/// =====================
class QuizScreen extends StatefulWidget {
  final String quizId;
  final String title;
  final List<Map<String, dynamic>> questions;
  final int rewardPoints;

  const QuizScreen({
    super.key,
    required this.quizId,
    required this.title,
    required this.questions,
    this.rewardPoints = 50,
  });

  @override
  State<QuizScreen> createState() => _QuizScreenState();
}

class _QuizScreenState extends State<QuizScreen>
    with SingleTickerProviderStateMixin {
  int _index = 0;
  List<int?> _answers = [];
  bool _saving = false;
  bool _showLeaf = false;

  late AnimationController _animController;
  late Animation<double> _fadeAnim;

  @override
  void initState() {
    super.initState();
    _answers = List<int?>.filled(widget.questions.length, null);
    _animController =
        AnimationController(vsync: this, duration: const Duration(milliseconds: 400));
    _fadeAnim = CurvedAnimation(parent: _animController, curve: Curves.easeInOut);
    _animController.forward();
  }

  @override
  void dispose() {
    _animController.dispose();
    super.dispose();
  }

  void _select(int optionIndex) {
    setState(() {
      _answers[_index] = optionIndex;
    });
  }

  void _next() {
    if (_index < widget.questions.length - 1) {
      setState(() {
        _animController.reverse().then((_) {
          _index++;
          _animController.forward();
        });
      });
    }
  }

  void _prev() {
    if (_index > 0) {
      setState(() {
        _animController.reverse().then((_) {
          _index--;
          _animController.forward();
        });
      });
    }
  }

  Future<void> _finish() async {
    final total = widget.questions.length;
    int correct = 0;
    for (int i = 0; i < total; i++) {
      if (_answers[i] == widget.questions[i]['answer']) correct++;
    }
    final percent = (correct / total) * 100.0;

    final userProv = Provider.of<UserProvider>(context, listen: false);
    final uid = userProv.firebaseUser?.uid ?? userProv.currentUser?.uid;
    if (uid == null) return;

    setState(() => _saving = true);

    // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    final histRef =
    FirebaseDatabase.instance.ref('users/$uid/quizHistory/${widget.quizId}').push();
    await histRef.set({
      'timestamp': DateTime.now().toIso8601String(),
      'correct': correct,
      'total': total,
      'percent': percent,
    });

    // üèÖ –ë–∞–ª–ª—ã –ø—Ä–∏ 100%
    if (correct == total && widget.rewardPoints > 0) {
      final scoreRef = FirebaseDatabase.instance.ref('users/$uid/score');
      await scoreRef.runTransaction((data) {
        double cur = 0.0;
        if (data is num) cur = data.toDouble();
        return Transaction.success(cur + widget.rewardPoints.toDouble());
      });
      setState(() => _showLeaf = true);
    }

    setState(() => _saving = false);

    if (!mounted) return;
    showDialog<void>(
      context: context,
      builder: (_) => AlertDialog(
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        title: const Text(
          '–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ üåø',
          style: TextStyle(fontWeight: FontWeight.bold),
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
              '–ü—Ä–∞–≤–∏–ª—å–Ω–æ: $correct –∏–∑ $total\n–ü—Ä–æ—Ü–µ–Ω—Ç: ${percent.toStringAsFixed(1)}%',
              style: const TextStyle(fontSize: 16),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 16),
            if (correct == total)
              AnimatedScale(
                duration: const Duration(seconds: 2),
                scale: 1.2,
                curve: Curves.elasticOut,
                child: Icon(
                  Icons.eco,
                  size: 64,
                  color: Colors.green.shade600,
                ),
              ),
            if (correct == total)
              Text(
                '\nüéâ –û—Ç–ª–∏—á–Ω–æ! +${widget.rewardPoints} –±–∞–ª–ª–æ–≤',
                style: const TextStyle(
                    fontWeight: FontWeight.bold, color: Colors.green),
                textAlign: TextAlign.center,
              ),
            if (correct != total)
              const Text(
                '\n–ü—Ä–æ–¥–æ–ª–∂–∞–π —É—á–∏—Ç—å—Å—è! üíö',
                textAlign: TextAlign.center,
              ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('–û–∫'),
          ),
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              Navigator.pop(context);
            },
            child: const Text('–í–µ—Ä–Ω—É—Ç—å—Å—è'),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    if (widget.questions.isEmpty) {
      return const Scaffold(
        body: Center(child: Text('–ü–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ üå±')),
      );
    }

    final q = widget.questions[_index];
    final selected = _answers[_index];
    final progress = (_index + 1) / widget.questions.length;

    return Scaffold(
      backgroundColor: Colors.green.shade50,
      body: LeafBackground(
        offsetFactor: 1.1,
        waveSpeed: 0.7,
        moveDuration: const Duration(seconds: 5),
        child: SafeArea(
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              children: [
                // üîπ –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å
                Row(
                  children: [
                    IconButton(
                      icon: const Icon(Icons.arrow_back_ios_new, color: Colors.green),
                      onPressed: () => Navigator.pop(context),
                    ),
                    Expanded(
                      child: Text(
                        widget.title,
                        style: const TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                          color: Color(0xFF1C1C1C),
                        ),
                        overflow: TextOverflow.ellipsis,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 8),

                // üîπ –ü—Ä–æ–≥—Ä–µ—Å—Å
                ClipRRect(
                  borderRadius: BorderRadius.circular(10),
                  child: LinearProgressIndicator(
                    value: progress,
                    backgroundColor: Colors.grey.shade300,
                    color: const Color(0xFF63D471),
                    minHeight: 10,
                  ),
                ),
                const SizedBox(height: 20),

                // üîπ –ö–æ–Ω—Ç–µ–Ω—Ç
                Expanded(
                  child: FadeTransition(
                    opacity: _fadeAnim,
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Container(
                          padding: const EdgeInsets.all(16),
                          decoration: BoxDecoration(
                            color: Colors.white.withOpacity(0.95),
                            borderRadius: BorderRadius.circular(18),
                            boxShadow: [
                              BoxShadow(
                                color: Colors.black.withOpacity(0.05),
                                blurRadius: 10,
                                offset: const Offset(0, 4),
                              ),
                            ],
                          ),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                '–í–æ–ø—Ä–æ—Å ${_index + 1} –∏–∑ ${widget.questions.length}',
                                style: const TextStyle(
                                  fontWeight: FontWeight.bold,
                                  color: Color(0xFF3DA56F),
                                ),
                              ),
                              const SizedBox(height: 8),
                              Text(
                                q['question'] ?? '',
                                style: const TextStyle(
                                  fontSize: 18,
                                  fontWeight: FontWeight.w500,
                                  color: Colors.black87,
                                ),
                              ),
                            ],
                          ),
                        ),
                        const SizedBox(height: 16),

                        // üîπ –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
                        Expanded(
                          child: ListView.builder(
                            itemCount: (q['options'] as List).length,
                            itemBuilder: (context, i) {
                              final opt = q['options'][i] as String;
                              final isSelected = selected == i;
                              return AnimatedContainer(
                                duration: const Duration(milliseconds: 250),
                                margin: const EdgeInsets.only(bottom: 10),
                                decoration: BoxDecoration(
                                  color: isSelected
                                      ? const Color(0xFF81C784).withOpacity(0.15)
                                      : Colors.white.withOpacity(0.9),
                                  borderRadius: BorderRadius.circular(14),
                                  border: Border.all(
                                    color: isSelected
                                        ? const Color(0xFF81C784)
                                        : Colors.grey.shade300,
                                    width: 1.2,
                                  ),
                                ),
                                child: ListTile(
                                  leading: Icon(
                                    isSelected
                                        ? Icons.check_circle
                                        : Icons.circle_outlined,
                                    color: isSelected
                                        ? const Color(0xFF3DA56F)
                                        : Colors.grey,
                                  ),
                                  title: Text(
                                    opt,
                                    style: TextStyle(
                                      fontSize: 16,
                                      color: isSelected
                                          ? const Color(0xFF2F4F2F)
                                          : Colors.black87,
                                    ),
                                  ),
                                  onTap: () => _select(i),
                                ),
                              );
                            },
                          ),
                        ),
                      ],
                    ),
                  ),
                ),

                const SizedBox(height: 12),

                // üîπ –ö–Ω–æ–ø–∫–∏
                if (_saving)
                  const Center(child: CircularProgressIndicator())
                else
                  Row(
                    children: [
                      if (_index > 0)
                        Expanded(
                          child: ElevatedButton(
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.white,
                              foregroundColor: Colors.green,
                              padding: const EdgeInsets.symmetric(vertical: 14),
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(12),
                                side: const BorderSide(color: Colors.green, width: 1.5),
                              ),
                            ),
                            onPressed: _prev,
                            child: const Text('–ù–∞–∑–∞–¥'),
                          ),
                        ),
                      if (_index > 0) const SizedBox(width: 8),
                      Expanded(
                        child: ElevatedButton(
                          style: ElevatedButton.styleFrom(
                            backgroundColor: const Color(0xFF63D471),
                            foregroundColor: Colors.white,
                            padding: const EdgeInsets.symmetric(vertical: 14),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(12),
                            ),
                          ),
                          onPressed: selected == null
                              ? null
                              : (_index < widget.questions.length - 1 ? _next : _finish),
                          child: Text(
                            _index < widget.questions.length - 1
                                ? '–î–∞–ª–µ–µ'
                                : '–ó–∞–≤–µ—Ä—à–∏—Ç—å',
                          ),
                        ),
                      ),
                    ],
                  ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

/// =====================
/// üåæ –í–û–ü–†–û–°–´ –í–ò–ö–¢–û–†–ò–ù
/// =====================

final List<Map<String, dynamic>> agroQuiz = [
  {'question': '–ß—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è–º –Ω—É–∂–Ω–æ –¥–ª—è –∂–∏–∑–Ω–∏?', 'options': ['–°–≤–µ—Ç, –≤–æ–¥–∞ –∏ –≤–æ–∑–¥—É—Ö', '–¢–æ–ª—å–∫–æ —Å–≤–µ—Ç', '–¢–æ–ª—å–∫–æ –≤–æ–¥–∞', '–¢–æ–ª—å–∫–æ –≤–æ–∑–¥—É—Ö'], 'answer': 0},
  {'question': '–ß—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–¥ –ø–æ–ª–∏–≤–æ–º?', 'options': ['–¶–≤–µ—Ç –ª–∏—Å—Ç—å–µ–≤', '–í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã', '–í—ã—Å–æ—Ç—É –≥–æ—Ä—à–∫–∞', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É'], 'answer': 1},
  {'question': '–ü–æ—á–µ–º—É –Ω—É–∂–µ–Ω –¥—Ä–µ–Ω–∞–∂ –≤ –≥–æ—Ä—à–∫–µ?', 'options': ['–ß—Ç–æ–±—ã —É–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–æ–¥—É', '–ß—Ç–æ–±—ã –∫–æ—Ä–Ω–∏ –Ω–µ –≥–Ω–∏–ª–∏', '–ß—Ç–æ–±—ã —Ä–∞—Å—Ç–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–µ–µ —Ä–æ—Å–ª–æ', '–ß—Ç–æ–±—ã –º–µ–Ω—å—à–µ –ø–æ–ª–∏–≤–∞—Ç—å'], 'answer': 1},
  {'question': '–ö–æ–≥–¥–∞ –ª—É—á—à–µ –ø–µ—Ä–µ—Å–∞–∂–∏–≤–∞—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏—è?', 'options': ['–ó–∏–º–æ–π', '–í–µ—Å–Ω–æ–π', '–û—Å–µ–Ω—å—é', '–õ–µ—Ç–æ–º'], 'answer': 1},
  {'question': '–ß—Ç–æ –±—ã–≤–∞–µ—Ç, –µ—Å–ª–∏ –ø–µ—Ä–µ–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ?', 'options': ['–û–Ω–æ —Ä–∞—Å—Ç—ë—Ç –±—ã—Å—Ç—Ä–µ–µ', '–ö–æ—Ä–Ω–∏ –º–æ–≥—É—Ç –∑–∞–≥–Ω–∏—Ç—å', '–û–Ω–æ —Ü–≤–µ—Ç—ë—Ç —á–∞—â–µ', '–ü–æ—á–≤–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ä—ã—Ö–ª–æ–π'], 'answer': 1},
  {'question': '–î–ª—è —á–µ–≥–æ –Ω—É–∂–µ–Ω —Å–æ–ª–Ω–µ—á–Ω—ã–π —Å–≤–µ—Ç —Ä–∞—Å—Ç–µ–Ω–∏—è–º?', 'options': ['–ß—Ç–æ–±—ã –≥—Ä–µ—Ç—å—Å—è', '–ß—Ç–æ–±—ã –ø–∏—Ç–∞—Ç—å—Å—è', '–ß—Ç–æ–±—ã –æ—Ç–¥—ã—Ö–∞—Ç—å', '–ß—Ç–æ–±—ã –æ—Ö–ª–∞–∂–¥–∞—Ç—å—Å—è'], 'answer': 1},
  {'question': '–ö–∞–∫–æ–π –≥—Ä—É–Ω—Ç –ª—é–±—è—Ç —Ä–∞—Å—Ç–µ–Ω–∏—è?', 'options': ['–¢–≤—ë—Ä–¥—ã–π –∫–∞–∫ –∫–∞–º–µ–Ω—å', '–ü–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–π –∏ —Ä—ã—Ö–ª—ã–π', '–ü–µ—Å—á–∞–Ω—ã–π –±–µ–∑ –≤–æ–¥—ã', '–ú–æ–∫—Ä—ã–π –∏ –ª–∏–ø–∫–∏–π'], 'answer': 1},
  {'question': '–ß—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –≤–æ–∑–¥—É—Ö—É –ø–æ–ø–∞–¥–∞—Ç—å –∫ –∫–æ—Ä–Ω—è–º?', 'options': ['–ü–ª–æ—Ç–Ω–∞—è –ø–æ—á–≤–∞', '–†—ã—Ö–ª–µ–Ω–∏–µ –∑–µ–º–ª–∏', '–ú–Ω–æ–≥–æ –≤–æ–¥—ã', '–ü–ª–∞—Å—Ç–∏–∫–æ–≤–∞—è –∫—Ä—ã—à–∫–∞'], 'answer': 1},
  {'question': '–ó–∞—á–µ–º —Ä–∞—Å—Ç–µ–Ω–∏—è–º —É–¥–æ–±—Ä–µ–Ω–∏—è?', 'options': ['–ß—Ç–æ–±—ã –∏–º –±—ã–ª–æ –≤–∫—É—Å–Ω–æ', '–ß—Ç–æ–±—ã –æ–Ω–∏ –ø–æ–ª—É—á–∞–ª–∏ –ø–∏—Ç–∞–Ω–∏–µ', '–ß—Ç–æ–±—ã –ø–∞—Ö–ª–∏ —Å–∏–ª—å–Ω–µ–µ', '–ß—Ç–æ–±—ã –Ω–µ –ø–∏—Ç—å –≤–æ–¥—É'], 'answer': 1},
  {'question': '–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–æ—á—å—é —Å —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏?', 'options': ['–û–Ω–∏ —Å–ø—è—Ç', '–î—ã—à–∞—Ç –∏ –æ—Ç–¥—ã—Ö–∞—é—Ç', '–°–≤–µ—Ç—è—Ç—Å—è', '–ù–µ –¥—ã—à–∞—Ç –≤–æ–æ–±—â–µ'], 'answer': 1},
  {'question': '–ö–∞–∫–∞—è –≤–æ–¥–∞ –ª—É—á—à–µ –¥–ª—è –ø–æ–ª–∏–≤–∞?', 'options': ['–•–æ–ª–æ–¥–Ω–∞—è', '–¢—ë–ø–ª–∞—è –∏ –æ—Ç—Å—Ç–æ—è–Ω–Ω–∞—è', '–ì–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è', '–°–æ–ª–µ–Ω–∞—è'], 'answer': 1},
  {'question': '–ß—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞—Å—Ç–µ–Ω–∏—é —Å—Ç–æ—è—Ç—å –ø—Ä—è–º–æ?', 'options': ['–ö–æ—Ä–Ω–∏', '–¶–≤–µ—Ç—ã', '–õ–∏—Å—Ç—å—è', '–ü–ª–æ–¥—ã'], 'answer': 0},
  {'question': '–ß—Ç–æ –±—ã–≤–∞–µ—Ç, –µ—Å–ª–∏ —Ä–∞—Å—Ç–µ–Ω–∏—é –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å–≤–µ—Ç–∞?', 'options': ['–û–Ω–æ –±–ª–µ–¥–Ω–µ–µ—Ç –∏ –≤—ã—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è', '–†–∞—Å—Ç—ë—Ç –±—ã—Å—Ç—Ä–µ–µ', '–¢–µ–º–Ω–µ–µ—Ç', '–ù–∞—á–∏–Ω–∞–µ—Ç –ø–∞—Ö–Ω—É—Ç—å'], 'answer': 0},
  {'question': '–ß–µ–º –ø–æ–ª–µ–∑–Ω—ã –ª–∏—Å—Ç—å—è?', 'options': ['–£–∫—Ä–∞—à–∞—é—Ç –∫–æ–º–Ω–∞—Ç—É', '–î—ã—à–∞—Ç –∏ –ø–∏—Ç–∞—é—Ç—Å—è —Å–≤–µ—Ç–æ–º', '–î–µ—Ä–∂–∞—Ç —Å—Ç–µ–±–µ–ª—å', '–ü—É–≥–∞—é—Ç –≤—Ä–µ–¥–∏—Ç–µ–ª–µ–π'], 'answer': 1},
  {'question': '–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –ª–∏—Å—Ç—å—è –ø–æ–∫—Ä—ã–ª–∏—Å—å –ø—ã–ª—å—é?', 'options': ['–ü–æ–ª–∏—Ç—å —Å–∏–ª—å–Ω–µ–µ', '–ü—Ä–æ—Ç–µ—Ä–µ—Ç—å –º—è–≥–∫–æ–π —Ç—Ä—è–ø–∫–æ–π', '–ü–æ—Å—ã–ø–∞—Ç—å –ø–µ—Å–∫–æ–º', '–û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å'], 'answer': 1},
];

final List<Map<String, dynamic>> financeQuiz = [
  {'question': '–ß—Ç–æ —Ç–∞–∫–æ–µ –¥–µ–Ω—å–≥–∏?', 'options': ['–ò–≥—Ä–∞', '–°—Ä–µ–¥—Å—Ç–≤–æ –æ–±–º–µ–Ω–∞', '–£–∫—Ä–∞—à–µ–Ω–∏–µ', '–ú–∞–≥–∏—è'], 'answer': 1},
  {'question': '–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–∞—Ä–º–∞–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏?', 'options': ['–ó–∞—Ä–ø–ª–∞—Ç–∞', '–î–µ–Ω—å–≥–∏ —Ä–µ–±—ë–Ω–∫–∞ –¥–ª—è –ª–∏—á–Ω—ã—Ö —Ç—Ä–∞—Ç', '–ö—Ä–µ–¥–∏—Ç', '–ü–æ–¥–∞—Ä–æ–∫ –≤—Å–µ–≥–¥–∞'], 'answer': 1},
  {'question': '–ü–æ—á–µ–º—É –ø–æ–ª–µ–∑–Ω–æ –∫–æ–ø–∏—Ç—å?', 'options': ['–ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –≤—Å—ë —Å—Ä–∞–∑—É', '–ß—Ç–æ–±—ã –Ω–∞–∫–æ–ø–∏—Ç—å –Ω–∞ —Ü–µ–ª—å', '–ß—Ç–æ–±—ã –Ω–µ —Ç—Ä–∞—Ç–∏—Ç—å –≤–æ–æ–±—â–µ', '–ß—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –¥—Ä—É–∑—å—è–º'], 'answer': 1},
  {'question': '–ß—Ç–æ —Ç–∞–∫–æ–µ –±—é–¥–∂–µ—Ç?', 'options': ['–ü–ª–∞–Ω –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤', '–ö–æ–ø–∏–ª–∫–∞', '–ò–≥—Ä–∞ –ø—Ä–æ –¥–µ–Ω—å–≥–∏', '–ö–Ω–∏–≥–∞'], 'answer': 0},
  {'question': '–ß—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–µ —Ç—Ä–∞—Ç–∏—Ç—å –ª–∏—à–Ω–µ–≥–æ?', 'options': ['–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫', '–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω', '–ü–æ–∫—É–ø–∫–∞ –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é', '–•–æ–∂–¥–µ–Ω–∏–µ –±–µ–∑ —Ü–µ–ª–∏'], 'answer': 0},
  {'question': '–ö–∞–∫ –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å?', 'options': ['–ü–æ–º–æ–≥–∞—è –∏ —Ä–∞–±–æ—Ç–∞—è', '–ü—Ä–æ—Å–∏—Ç—å —É –≤—Å–µ—Ö', '–ò–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—ã', '–ë—Ä–∞—Ç—å –±–µ–∑ —Å–ø—Ä–æ—Å–∞'], 'answer': 0},
  {'question': '–ü–æ—á–µ–º—É –≤–∞–∂–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã?', 'options': ['–ß—Ç–æ–±—ã –∑–∞–±—ã–≤–∞—Ç—å', '–ß—Ç–æ–±—ã –ø–æ–Ω–∏–º–∞—Ç—å, –∫—É–¥–∞ —É—Ö–æ–¥—è—Ç –¥–µ–Ω—å–≥–∏', '–ß—Ç–æ–±—ã —Ç—Ä–∞—Ç–∏—Ç—å –±–æ–ª—å—à–µ', '–ß—Ç–æ–±—ã –∑–∞–ø—É—Ç–∞—Ç—å—Å—è'], 'answer': 1},
  {'question': '–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±–∞–Ω–∫?', 'options': ['–ü—Ä—è—á–µ—Ç –¥–µ–Ω—å–≥–∏ –Ω–∞–≤—Å–µ–≥–¥–∞', '–•—Ä–∞–Ω–∏—Ç –∏ –ø–æ–º–æ–≥–∞–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –¥–µ–Ω—å–≥–∞–º–∏', '–î–∞—Ä–∏—Ç –¥–µ–Ω—å–≥–∏', '–ü—Ä–æ–¥–∞—ë—Ç –º–æ–Ω–µ—Ç—ã'], 'answer': 1},
  {'question': '–ß—Ç–æ –∑–Ω–∞—á–∏—Ç —ç–∫–æ–Ω–æ–º–∏—Ç—å?', 'options': ['–¢—Ä–∞—Ç–∏—Ç—å –≤—Å—ë', '–ü–æ–∫—É–ø–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–µ', '–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—ã', '–ü–æ–∫—É–ø–∞—Ç—å –ª–∏—à–Ω–µ–µ'], 'answer': 1},
  {'question': '–ß—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–∫–æ–ø–∏—Ç—å –±—ã—Å—Ç—Ä–µ–µ?', 'options': ['–ü–ª–∞–Ω –∏ —Ü–µ–ª—å', '–ü–æ–∫—É–ø–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å', '–î–æ–ª–≥–∏', '–õ–µ–Ω—å'], 'answer': 0},
  {'question': '–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ —Ö–æ—á–µ—Ç—Å—è –¥–æ—Ä–æ–≥—É—é –≤–µ—â—å?', 'options': ['–ü–æ–ø—Ä–æ—Å–∏—Ç—å', '–ü–æ–¥–æ–∂–¥–∞—Ç—å –∏ –Ω–∞–∫–æ–ø–∏—Ç—å', '–í–∑—è—Ç—å –≤ –¥–æ–ª–≥', '–ó–∞–±—ã—Ç—å'], 'answer': 1},
  {'question': '–ß—Ç–æ –∑–Ω–∞—á–∏—Ç ‚Äú–¥–æ—Ö–æ–¥‚Äù?', 'options': ['–°–∫–æ–ª—å–∫–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª', '–°–∫–æ–ª—å–∫–æ –∑–∞—Ä–∞–±–æ—Ç–∞–ª', '–°–∫–æ–ª—å–∫–æ –ø–æ—Ç–µ—Ä—è–ª', '–°–∫–æ–ª—å–∫–æ –ø–æ–¥–∞—Ä–∏–ª'], 'answer': 1},
  {'question': '–ß—Ç–æ –∑–Ω–∞—á–∏—Ç ‚Äú—Ä–∞—Å—Ö–æ–¥‚Äù?', 'options': ['–¢–æ, —á—Ç–æ –∑–∞—Ä–∞–±–æ—Ç–∞–ª', '–¢–æ, —á—Ç–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª', '–¢–æ, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª', '–¢–æ, —á—Ç–æ –ø–æ–ª—É—á–∏–ª'], 'answer': 1},
  {'question': '–ó–∞—á–µ–º –Ω—É–∂–Ω–∞ –∫–æ–ø–∏–ª–∫–∞?', 'options': ['–ß—Ç–æ–±—ã —Å–æ–±–∏—Ä–∞—Ç—å –¥–µ–Ω—å–≥–∏ –Ω–∞ —Ü–µ–ª—å', '–ß—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å', '–ß—Ç–æ–±—ã —Ç—Ä–∞—Ç–∏—Ç—å –≤—Å—ë', '–ß—Ç–æ–±—ã —Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä—É—à–∫–∏'], 'answer': 0},
  {'question': '–ß—Ç–æ –ª—É—á—à–µ: –¥—É–º–∞—Ç—å –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π –∏–ª–∏ —Å—Ä–∞–∑—É –±—Ä–∞—Ç—å?', 'options': ['–î—É–º–∞—Ç—å', '–ë—Ä–∞—Ç—å —Å—Ä–∞–∑—É', '–ñ–¥–∞—Ç—å —Å–∫–∏–¥–æ–∫', '–°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —É–ø–∞–∫–æ–≤–∫—É'], 'answer': 0},
];

final List<Map<String, dynamic>> ecologyQuiz = [
  {'question': '–ß—Ç–æ –∑–Ω–∞—á–∏—Ç ‚Äú—ç–∫–æ–ª–æ–≥–∏—è‚Äù?', 'options': ['–ò–∑—É—á–µ–Ω–∏–µ –ø—Ä–∏—Ä–æ–¥—ã –∏ –µ—ë –∑–∞—â–∏—Ç—ã', '–ü—Ä–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö —Ç–æ–ª—å–∫–æ', '–ü—Ä–æ –∫–∞–º–Ω–∏', '–ü—Ä–æ –¥–µ–Ω—å–≥–∏'], 'answer': 0},
  {'question': '–ß—Ç–æ –∑–Ω–∞—á–∏—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º—É—Å–æ—Ä?', 'options': ['–†–∞–∑–¥–µ–ª—è—Ç—å –ø–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º', '–°–º–µ—à–∏–≤–∞—Ç—å –≤—Å—ë', '–í—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –≤ —Ä–µ–∫—É', '–°–∂–∏–≥–∞—Ç—å'], 'answer': 0},
  {'question': '–ü–æ—á–µ–º—É –≤–∞–∂–Ω–æ —ç–∫–æ–Ω–æ–º–∏—Ç—å –≤–æ–¥—É?', 'options': ['–ü–æ—Ç–æ–º—É —á—Ç–æ —ç—Ç–æ –¥–æ—Ä–æ–≥–æ', '–ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏—Ä–æ–¥—É', '–ß—Ç–æ–±—ã –∫—Ä–∞–Ω –Ω–µ —à—É–º–µ–ª', '–ß—Ç–æ–±—ã –Ω–µ –º—ã—Ç—å —Ä—É–∫–∏'], 'answer': 1},
  {'question': '–ó–∞—á–µ–º –Ω—É–∂–Ω—ã –¥–µ—Ä–µ–≤—å—è?', 'options': ['–î–∞—é—Ç —Ç–µ–Ω—å –∏ —á–∏—Å—Ç—è—Ç –≤–æ–∑–¥—É—Ö', '–ú–µ—à–∞—é—Ç —Å–æ–ª–Ω—Ü—É', '–ó–∞–Ω–∏–º–∞—é—Ç –º–µ—Å—Ç–æ', '–ù–∏–∫–∞–∫ –Ω–µ –ø–æ–ª–µ–∑–Ω—ã'], 'answer': 0},
  {'question': '–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å –±—É–º–∞–≥–æ–π –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è?', 'options': ['–í—ã–±—Ä–æ—Å–∏—Ç—å', '–°–¥–∞—Ç—å –Ω–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É', '–°–∂–µ—á—å', '–°–ø—Ä—è—Ç–∞—Ç—å'], 'answer': 1},
  {'question': '–ß—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–∏—Ä–æ–¥–µ –¥–æ–º–∞?', 'options': ['–í—ã–∫–ª—é—á–∞—Ç—å —Å–≤–µ—Ç, –∫–æ–≥–¥–∞ –Ω–µ –Ω—É–∂–µ–Ω', '–û—Å—Ç–∞–≤–ª—è—Ç—å –≤–æ–¥—É –≤–∫–ª—é—á–µ–Ω–Ω–æ–π', '–ü–æ–∫—É–ø–∞—Ç—å –ø–ª–∞—Å—Ç–∏–∫', '–í—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –µ–¥—É'], 'answer': 0},
  {'question': '–ü–æ—á–µ–º—É –≤–∞–∂–Ω–æ –ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—Ç—Ö–æ–¥—ã?', 'options': ['–ß—Ç–æ–±—ã –º—É—Å–æ—Ä–∞ —Å—Ç–∞–ª–æ –º–µ–Ω—å—à–µ', '–ß—Ç–æ–±—ã –¥–µ–ª–∞—Ç—å –∏–≥—Ä—É—à–∫–∏', '–ß—Ç–æ–±—ã –±—ã–ª–æ –≤–µ—Å–µ–ª–æ', '–ß—Ç–æ–±—ã —à—É–º–µ–ª–æ'], 'answer': 0},
  {'question': '–ß—Ç–æ –º–æ–∂–Ω–æ —Å–∞–∂–∞—Ç—å –Ω–∞ –ø–æ–¥–æ–∫–æ–Ω–Ω–∏–∫–µ?', 'options': ['–ó–µ–ª–µ–Ω—å, —Ü–≤–µ—Ç—ã', '–ü–ª–∞—Å—Ç–∏–∫', '–ë—É–º–∞–≥—É', '–ö–∞–º–Ω–∏'], 'answer': 0},
  {'question': '–ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç, –µ—Å–ª–∏ –≤—ã—Ä—É–±–∏—Ç—å –≤—Å–µ –¥–µ—Ä–µ–≤—å—è?', 'options': ['–í–æ–∑–¥—É—Ö —Å—Ç–∞–Ω–µ—Ç –≥—Ä—è–∑–Ω–µ–µ', '–ë—É–¥–µ—Ç –±–æ–ª—å—à–µ —Ç–µ–Ω–µ–π', '–ù–∏—á–µ–≥–æ', '–ü–æ—è–≤—è—Ç—Å—è –≥–æ—Ä—ã'], 'answer': 0},
  {'question': '–ö–∞–∫ –º–æ–∂–Ω–æ –ø–æ–º–æ—á—å –∂–∏–≤–æ—Ç–Ω—ã–º?', 'options': ['–ö–æ—Ä–º–∏—Ç—å –∏ –Ω–µ –≤—Ä–µ–¥–∏—Ç—å –∏–º', '–ü—É–≥–∞—Ç—å', '–õ–æ–≤–∏—Ç—å —Ä–∞–¥–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞', '–û—Å—Ç–∞–≤–ª—è—Ç—å –º—É—Å–æ—Ä'], 'answer': 0},
  {'question': '–ß—Ç–æ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–º–µ—Å—Ç–æ –ø–∞–∫–µ—Ç–æ–≤?', 'options': ['–ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—É—é —Å—É–º–∫—É', '–ü–∞–∫–µ—Ç—ã –∫–∞–∂–¥—ã–π —Ä–∞–∑', '–ü–∞–∫–µ—Ç—ã —Å –Ω–∞–¥–ø–∏—Å—è–º–∏', '–õ—é–±—ã–µ –º–µ—à–∫–∏'], 'answer': 0},
  {'question': '–ö–∞–∫–æ–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —ç–∫–æ–ª–æ–≥–∏—á–Ω—ã–π?', 'options': ['–í–µ–ª–æ—Å–∏–ø–µ–¥ –∏ —Å–∞–º–æ–∫–∞—Ç', '–ê–≤—Ç–æ–º–æ–±–∏–ª—å', '–°–∞–º–æ–ª—ë—Ç', '–ö–∞—Ç–µ—Ä'], 'answer': 0},
  {'question': '–ß—Ç–æ –Ω–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –≤ –ø—Ä–∏—Ä–æ–¥—É?', 'options': ['–ë–∞—Ç–∞—Ä–µ–π–∫–∏ –∏ –ø–ª–∞—Å—Ç–∏–∫', '–Ø–±–ª–æ–∫–∏', '–õ–∏—Å—Ç—å—è', '–ö–∞–º–Ω–∏'], 'answer': 0},
  {'question': '–ö–∞–∫ –º–æ–∂–Ω–æ —ç–∫–æ–Ω–æ–º–∏—Ç—å —ç–Ω–µ—Ä–≥–∏—é?', 'options': ['–í—ã–∫–ª—é—á–∞—Ç—å —Å–≤–µ—Ç –∏ –ø—Ä–∏–±–æ—Ä—ã', '–í—Å—ë –≤–∫–ª—é—á–∞—Ç—å —Å—Ä–∞–∑—É', '–û—Å—Ç–∞–≤–ª—è—Ç—å —Å–≤–µ—Ç –Ω–æ—á—å—é', '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–ª–µ–≤–∏–∑–æ—Ä –≤—Å–µ–≥–¥–∞'], 'answer': 0},
  {'question': '–ü–æ—á–µ–º—É –≤–∞–∂–Ω–æ —É—á–∏—Ç—å –¥–µ—Ç–µ–π —ç–∫–æ–ª–æ–≥–∏–∏?', 'options': ['–ß—Ç–æ–±—ã –æ–Ω–∏ –±–µ—Ä–µ–≥–ª–∏ –ø—Ä–∏—Ä–æ–¥—É', '–ß—Ç–æ–±—ã –æ–Ω–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–ª–∏', '–ß—Ç–æ–±—ã —à—É–º–µ–ª–∏', '–ß—Ç–æ–±—ã –º—É—Å–æ—Ä–∏–ª–∏'], 'answer': 0},
];
